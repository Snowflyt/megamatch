{
  "name": "megamatch",
  "version": "0.1.3",
  "private": true,
  "description": "Painless pattern matching in TypeScript with type safety and minimalistic syntax.",
  "keywords": [
    "pattern matching",
    "pattern",
    "match",
    "matching",
    "typescript",
    "type safe",
    "switch",
    "adt"
  ],
  "homepage": "https://github.com/Snowflyt/megamatch",
  "bugs": {
    "url": "https://github.com/Snowflyt/megamatch/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/Snowflyt/megamatch"
  },
  "license": "MPL-2.0",
  "author": "Ge Gao (Snowflyt) <gaoge011022@gmail.com>",
  "type": "module",
  "main": "./index.js",
  "module": "./index.js",
  "types": "./index.d.ts",
  "scripts": {
    "bench": "vitest bench --run",
    "bench:watch": "vitest bench",
    "build": "rimraf dist && npm run typecheck && npm run test-types && npm run test && npm run compile && cpy package.json dist && json -I -f dist/package.json -e \"delete this.private; delete this.scripts; delete this.devDependencies\" && cpy README.md dist && cpy LICENSE dist && cpy COMMERCIAL_LICENSE.md dist",
    "compile": "tsc --emitDeclarationOnly --composite false -p tsconfig.build.json && cpy src/**/*.js dist && cpy src/**/*.ts dist && rimraf dist/lib/parser/static.d.ts && renamer --find .ts --replace .d.ts dist/lib/parser/static.ts && rimraf -g \"dist/lib/type-utils/**/*.d.ts\" && renamer --find .ts --replace .d.ts \"dist/lib/type-utils/**\" && rimraf -g \"dist/static/**/*.d.ts\" && renamer --find .ts --replace .d.ts --force \"dist/static/**\" && rimraf dist/types.d.ts && renamer --find .ts --replace .d.ts dist/types.ts && node -e \"import path from 'node:path'; import fs from 'node:fs'; import tsBlankSpace from 'ts-blank-space'; fs.readdirSync('dist', { recursive: true }).map((file) => path.join('dist', file)).filter((file) => file.endsWith('.ts') && !file.endsWith('.d.ts') && fs.statSync(file).isFile()).forEach((file) => { fs.writeFileSync(file.substring(0, file.lastIndexOf('.')) + '.js', tsBlankSpace(fs.readFileSync(file, 'utf-8'))); fs.rmSync(file); })\" && tsc-alias --resolve-full-paths -p tsconfig.build.json && node -e \"import { replaceInFileSync } from 'replace-in-file'; [/ *\\/\\/ eslint-disable-next-line [^\\n]+\\n/g, / *\\/\\* eslint-(disable|enable) [^\\n]+ \\*\\/\\n/g, /^\\s*\\/\\/ @ts-.+$/gm].forEach((regex) => replaceInFileSync({ files: 'dist/**/*.js', from: regex, to: '' }))\" && prettier --log-level=silent --print-width 80 --write dist/**/* --ignore-path !dist/**/* && node -e \"import { replaceInFileSync } from 'replace-in-file'; replaceInFileSync({ files: 'dist/**/*.js', from: /^ *\\*\\/\\n\\n/gm, to: '*/\\n' }); for (let i = 0; i < 10; i++) replaceInFileSync({ files: 'dist/**/*.js', from: /^ *\\/\\*\\*\\n(( \\*( [^\\n]*)?\\n)+) *\\*\\/\\n( *\\/)/gm, to: '$4' })\" && prettier --log-level=silent --print-width 80 --write dist/**/* --ignore-path !dist/**/*",
    "format": "prettier --no-error-on-unmatched-pattern --write **/*.{js,ts,json,md} *.{cjs,mjs,cts,mts}",
    "lint": "eslint **/*.{js,ts} *.{cjs,mjs,cts,mts} --no-error-on-unmatched-pattern --report-unused-disable-directives-severity error --max-warnings 0",
    "lint:fix": "eslint --fix **/*.{js,ts} *.{cjs,mjs,cts,mts} --no-error-on-unmatched-pattern --report-unused-disable-directives-severity error --max-warnings 0",
    "measure-size": "rimraf dist && npm run compile && esbuild --bundle --minify --platform=neutral --log-level=silent --outfile=dist/megamatch.min.js dist/index.js && node -e \"import fs from 'node:fs'; import prettyBytes from 'pretty-bytes'; import { gzipSizeSync } from 'gzip-size'; import brotliSize from 'brotli-size'; const fixed = 3; const content = fs.readFileSync('dist/megamatch.min.js', 'utf-8'); console.log('gzip:  ', `\\x1b[33m${prettyBytes(content.length, { maximumFractionDigits: fixed })}\\x1b[0m (bundled+minified)`, '→', `\\x1b[36m${prettyBytes(gzipSizeSync(content), { maximumFractionDigits: fixed })}\\x1b[0m`); console.log('brotli:', `\\x1b[33m${prettyBytes(content.length, { maximumFractionDigits: fixed })}\\x1b[0m (bundled+minified)`, '→', `\\x1b[36m${prettyBytes(brotliSize.sync(content), { maximumFractionDigits: fixed })}\\x1b[0m`)\" && rimraf dist",
    "prepare": "node -e \"import fs from 'node:fs'; import path from 'node:path'; const hooksDir = path.join(process.cwd(), '.githooks'); const gitHooksDir = path.join(process.cwd(), '.git/hooks'); if (fs.existsSync(gitHooksDir)) { fs.readdirSync(hooksDir).forEach(file => { const srcFile = path.join(hooksDir, file); const destFile = path.join(gitHooksDir, file); fs.copyFileSync(srcFile, destFile); if (process.platform !== 'win32' && !file.endsWith('.cmd')) { fs.chmodSync(destFile, 0o755); } }); }\"",
    "test": "vitest run",
    "test-types": "tsc --noEmit --composite false -p tsconfig.test.json && typroof",
    "test:cov": "vitest run --coverage --coverage.reporter=text --coverage.reporter=lcov --coverage.include \"src/**/!(*.proof).{js,ts}\" --coverage.exclude \"src/lib/parser/static.ts\" --coverage.exclude \"src/lib/type-utils/**/*\" --coverage.exclude \"src/static/**/*\" --coverage.exclude \"src/types.ts\"",
    "test:ui": "vitest --ui --coverage.enabled=true --coverage.reporter=text --coverage.reporter=lcov --coverage.include \"src/**/!(*.proof).{js,ts}\" --coverage.exclude \"src/lib/parser/static.ts\" --coverage.exclude \"src/lib/type-utils/**/*\" --coverage.exclude \"src/static/**/*\" --coverage.exclude \"src/types.ts\"",
    "test:watch": "vitest",
    "test:watch-cov": "vitest --coverage --coverage.reporter=text --coverage.reporter=lcov --coverage.include \"src/**/!(*.proof).{js,ts}\" --coverage.exclude \"src/lib/parser/static.ts\" --coverage.exclude \"src/lib/type-utils/**/*\" --coverage.exclude \"src/static/**/*\" --coverage.exclude \"src/types.ts\"",
    "typecheck": "tsc --noEmit --composite false -p tsconfig.build.json"
  },
  "dependencies": {
    "hkt-core": "^1.0.0"
  },
  "devDependencies": {
    "@commitlint/cli": "^19.8.0",
    "@typescript-eslint/parser": "^8.30.1",
    "@vitest/coverage-v8": "^3.1.1",
    "@vitest/ui": "^3.1.1",
    "arktype": "^2.1.20",
    "brotli-size": "^4.0.0",
    "cpy-cli": "^5.0.0",
    "effect": "^3.14.11",
    "eslint": "^9.25.0",
    "eslint-config-prettier": "^10.1.2",
    "eslint-import-resolver-typescript": "^4.3.2",
    "eslint-plugin-import-x": "^4.10.5",
    "eslint-plugin-jsdoc": "^50.6.9",
    "eslint-plugin-prettier": "^5.2.6",
    "eslint-plugin-sonarjs": "^3.0.2",
    "eslint-plugin-sort-destructure-keys": "^2.0.0",
    "globals": "^16.0.0",
    "gzip-size": "^7.0.0",
    "json": "^11.0.0",
    "prettier": "^3.5.3",
    "prettier-plugin-packagejson": "^2.5.10",
    "pretty-bytes": "^6.1.1",
    "renamer": "^5.0.2",
    "replace-in-file": "^8.3.0",
    "rimraf": "^6.0.1",
    "ts-blank-space": "^0.6.1",
    "ts-pattern": "^5.7.0",
    "tsc-alias": "^1.8.15",
    "typescript": "^5.8.3",
    "typescript-eslint": "^8.30.1",
    "typroof": "^0.5.1",
    "vitest": "^3.1.1"
  }
}
